#[macro_use]
extern crate ini;
use bevy::prelude::*;
use bevy_ecs_tilemap::prelude::*;
use rand::{thread_rng, Rng};

mod helpers;
mod scene;
mod tetromino;
mod config;


fn startup(
    mut commands: Commands,
    asset_server: Res<AssetServer>,
    config: Res<config::ConfigData>
) {
    commands.spawn(Camera2dBundle::default());

    // let texture_handle: Handle<Image> = asset_server.load("tiles.png");
    //
    // let map_size = TilemapSize { x: 32, y: 32 };
    // let mut tile_storage = TileStorage::empty(map_size);
    // let tilemap_entity = commands.spawn_empty().id();
    //
    // for x in 0..32u32 {
    //     for y in 0..32u32 {
    //         let tile_pos = TilePos { x, y };
    //         let tile_entity = commands
    //             .spawn(TileBundle {
    //                 position: tile_pos,
    //                 tilemap_id: TilemapId(tilemap_entity),
    //                 ..Default::default()
    //             })
    //             .id();
    //         tile_storage.set(&tile_pos, tile_entity);
    //     }
    // }
    //
    // let tile_size = TilemapTileSize { x: 16.0, y: 16.0 };
    // let grid_size = tile_size.into();
    // let map_type = TilemapType::default();
    //
    // commands.entity(tilemap_entity).insert((
    //     TilemapBundle {
    //         grid_size,
    //         map_type,
    //         size: map_size,
    //         storage: tile_storage,
    //         texture: TilemapTexture::Single(texture_handle),
    //         tile_size,
    //         transform: get_tilemap_center_transform(&map_size, &grid_size, &map_type, 0.0),
    //         ..Default::default()
    //     },
    //     LastUpdate::default(),
    // ));

    let texture_handle: Handle<Image> = asset_server.load(config.game_config.tiles_path.clone());
    let map_size = TilemapSize { x: 10, y: 20 };
    let mut tile_storage = TileStorage::empty(map_size);

    // println!("DEBUG: main_tilemap, 177");
    let tilemap_entity = commands.spawn_empty().id();

    let tile_pos1 = TilePos { x: 0, y: 1 };
    let tile_entity1 = commands
        .spawn(TileBundle {
            position: tile_pos1,
            tilemap_id: TilemapId(tilemap_entity),
            texture_index: TileTextureIndex(1),
            ..Default::default()
        })
        .id();
    tile_storage.set(&tile_pos1, tile_entity1);

    let tile_pos2 = TilePos { x: 0, y: 2 };
    let tile_entity2 = commands
        .spawn(TileBundle {
            position: tile_pos2,
            tilemap_id: TilemapId(tilemap_entity),
            texture_index: TileTextureIndex(2),
            ..Default::default()
        })
        .id();
    tile_storage.set(&tile_pos2, tile_entity2);

    let tile_pos3 = TilePos { x: 0, y: 3 };
    let tile_entity3 = commands
        .spawn(TileBundle {
            position: tile_pos3,
            tilemap_id: TilemapId(tilemap_entity),
            texture_index: TileTextureIndex(3),
            ..Default::default()
        })
        .id();
    tile_storage.set(&tile_pos3, tile_entity3);

    for y in (0..20).rev() {
        for x in 0..10 {
            if tile_storage.get(&TilePos{x: x as u32, y: y as u32}).is_some() {
                print!("*");
            } else {
                print!(".");
            }
        }
        print!("\n")
    }
    print!("\n\n\n");

    let tile_size = TilemapTileSize { x: config.game_config.tile_size, y: config.game_config.tile_size };
    let grid_size = tile_size.into();
    let map_type = TilemapType::default();
    commands.entity(tilemap_entity).insert(
        TilemapBundle {
            grid_size,
            map_type,
            size: map_size,
            storage: tile_storage,
            texture: TilemapTexture::Single(texture_handle),
            tile_size,
            transform: scene::calculate_transform(&map_size, &grid_size, &map_type, config.game_config.scale_factor, 0.0),
            // transform: get_tilemap_center_transform(&map_size, &grid_size, &map_type, 0.0),
            ..Default::default()
        });
}

#[derive(Default, Component)]
struct LastUpdate {
    value: f64,
}

fn remove_tiles(
    mut commands: Commands,
    time: Res<Time>,
    mut last_update_query: Query<(&mut LastUpdate, &mut TileStorage)>,
) {
    let current_time = time.elapsed_seconds_f64();
    for (mut last_update, mut tile_storage) in last_update_query.iter_mut() {
        // Remove a tile every half second.
        if (current_time - last_update.value) > 0.1 {
            let mut random = thread_rng();
            let position = TilePos {
                x: random.gen_range(0..32),
                y: random.gen_range(0..32),
            };

            if let Some(tile_entity) = tile_storage.get(&position) {
                commands.entity(tile_entity).despawn_recursive();
                // Don't forget to remove tiles from the tile storage!
                tile_storage.remove(&position);
            }

            last_update.value = current_time;
        }
    }
}

fn main() {
    App::new()
        .add_plugins(
            DefaultPlugins
        )
        .add_plugins(TilemapPlugin)
        .insert_resource(config::load_config("config.ini".to_string()))
        .add_systems(Startup, startup)
        // .add_systems(Update, helpers::camera::movement)
        // .add_systems(Update, remove_tiles)
        .run();
}